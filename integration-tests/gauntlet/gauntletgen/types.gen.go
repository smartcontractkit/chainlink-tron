// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

// Config Gauntlet runtime configuration
type Config struct {
	Datasources []Datasource `json:"datasources"`
	Providers   []Provider   `json:"providers"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Active *bool                   `json:"active,omitempty"`
	Input  map[string]*interface{} `json:"input"`
	Name   string                  `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Message string  `json:"message"`
}

// ExecuteBody defines model for ExecuteBody.
type ExecuteBody struct {
	// Config Gauntlet runtime configuration
	Config *Config `json:"config,omitempty"`

	// Operation Gauntlet operation with input arguments
	Operation Operation    `json:"operation"`
	Plan      *interface{} `json:"plan"`
	Snapshot  *Snapshot    `json:"snapshot"`
}

// InspectOpBody defines model for InspectOpBody.
type InspectOpBody struct {
	// Name The name of Gauntlet operation.
	Name OperationName `json:"name"`
}

// InspectProviderBody defines model for InspectProviderBody.
type InspectProviderBody struct {
	// Name The name of Gauntlet provider (components which fulfil requirements).
	Name ProviderName `json:"name"`
}

// MethodBody defines model for MethodBody.
type MethodBody struct {
	// Config Gauntlet runtime configuration
	Config *Config `json:"config,omitempty"`

	// Operation Gauntlet operation with input arguments
	Operation Operation `json:"operation"`
}

// Operation Gauntlet operation with input arguments
type Operation struct {
	// Args The args used for this operation.
	Args *interface{} `json:"args"`

	// Name The name of Gauntlet operation.
	Name OperationName `json:"name"`
}

// OperationName The name of Gauntlet operation.
type OperationName = string



// Provider defines model for Provider.
// Refer to https://github.com/smartcontractkit/gauntlet-plus-plus/blob/7355f7c7caef3e6123795c0a8d5fd507a5955212/packages-tron/extension-tron/src/providers/index.ts#L16 for Tron provider example.
type Provider struct {
	Active *bool                   `json:"active,omitempty"`
	Input  map[string]*interface{} `json:"input"`
	Name   string                  `json:"name"`
	Type   string                  `json:"type"`
}

// ProviderName The name of Gauntlet provider (components which fulfil requirements).
type ProviderName = string

// Report defines model for Report.
type Report struct {
	Config       *interface{}             `json:"config"`
	Data         map[string]interface{}   `json:"data"`
	Error        *Error                   `json:"error,omitempty"`
	Id           string                   `json:"id"`
	Input        map[string]interface{}   `json:"input"`
	Op           map[string]interface{}   `json:"op"`
	Output       *interface{}             `json:"output"`
	Requirements *map[string]interface{}  `json:"requirements,omitempty"`
	Snapshot     *Snapshot                `json:"snapshot"`
	Subops       []map[string]interface{} `json:"subops"`
}

// ReportBody defines model for ReportBody.
type ReportBody struct {
	Ids []string `json:"ids"`
}

// Snapshot defines model for Snapshot.
type Snapshot = map[string]interface{}

// StartBody defines model for StartBody.
type StartBody struct {
	Config *interface{} `json:"config"`

	// Workflow Gauntlet workflow with input arguments
	Workflow Workflow `json:"workflow"`
}

// Workflow Gauntlet workflow with input arguments
type Workflow struct {
	// Args The args used for this workflow.
	Args *interface{} `json:"args"`

	// Name The name of Gauntlet workflow.
	Name WorkflowName `json:"name"`
}

// WorkflowName The name of Gauntlet workflow.
type WorkflowName = string

// WorkflowReport defines model for WorkflowReport.
type WorkflowReport struct {
	Error  *map[string]interface{} `json:"error,omitempty"`
	Id     *string                 `json:"id,omitempty"`
	Input  map[string]interface{}  `json:"input"`
	Output *map[string]interface{} `json:"output,omitempty"`
	Steps  []Report                `json:"steps"`
	Wf     map[string]interface{}  `json:"wf"`
}

// PostExecuteJSONRequestBody defines body for PostExecute for application/json ContentType.
type PostExecuteJSONRequestBody = ExecuteBody

// PostInspectOpJSONRequestBody defines body for PostInspectOp for application/json ContentType.
type PostInspectOpJSONRequestBody = InspectOpBody

// PostInspectProviderJSONRequestBody defines body for PostInspectProvider for application/json ContentType.
type PostInspectProviderJSONRequestBody = InspectProviderBody

// PostPlanJSONRequestBody defines body for PostPlan for application/json ContentType.
type PostPlanJSONRequestBody = MethodBody

// PostQueryJSONRequestBody defines body for PostQuery for application/json ContentType.
type PostQueryJSONRequestBody = MethodBody

// PostReportsJSONRequestBody defines body for PostReports for application/json ContentType.
type PostReportsJSONRequestBody = ReportBody

// PostWorkflowsReportsJSONRequestBody defines body for PostWorkflowsReports for application/json ContentType.
type PostWorkflowsReportsJSONRequestBody = ReportBody

// PostWorkflowsStartJSONRequestBody defines body for PostWorkflowsStart for application/json ContentType.
type PostWorkflowsStartJSONRequestBody = StartBody
