// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostExecuteWithBody request with any body
	PostExecuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecute(ctx context.Context, body PostExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInspectOpWithBody request with any body
	PostInspectOpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInspectOp(ctx context.Context, body PostInspectOpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInspectProviderWithBody request with any body
	PostInspectProviderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInspectProvider(ctx context.Context, body PostInspectProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetList request
	GetList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlanWithBody request with any body
	PostPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlan(ctx context.Context, body PostPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryWithBody request with any body
	PostQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQuery(ctx context.Context, body PostQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReportsWithBody request with any body
	PostReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReports(ctx context.Context, body PostReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportsList request
	GetReportsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsList request
	GetWorkflowsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsReportsWithBody request with any body
	PostWorkflowsReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflowsReports(ctx context.Context, body PostWorkflowsReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsReportsList request
	GetWorkflowsReportsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsStartWithBody request with any body
	PostWorkflowsStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflowsStart(ctx context.Context, body PostWorkflowsStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostExecuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// Fix handling errors of PostExecute
func (c *Client) PostExecute(ctx context.Context, body PostExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInspectOpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInspectOpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInspectOp(ctx context.Context, body PostInspectOpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInspectOpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInspectProviderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInspectProviderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInspectProvider(ctx context.Context, body PostInspectProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInspectProviderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlan(ctx context.Context, body PostPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuery(ctx context.Context, body PostQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReports(ctx context.Context, body PostReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsReports(ctx context.Context, body PostWorkflowsReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsReportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsReportsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsReportsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsStart(ctx context.Context, body PostWorkflowsStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostExecuteRequest calls the generic PostExecute builder with application/json body
func NewPostExecuteRequest(server string, body PostExecuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecuteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostExecuteRequestWithBody generates requests for PostExecute with any type of body
func NewPostExecuteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/execute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInspectOpRequest calls the generic PostInspectOp builder with application/json body
func NewPostInspectOpRequest(server string, body PostInspectOpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInspectOpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInspectOpRequestWithBody generates requests for PostInspectOp with any type of body
func NewPostInspectOpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inspect/op")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInspectProviderRequest calls the generic PostInspectProvider builder with application/json body
func NewPostInspectProviderRequest(server string, body PostInspectProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInspectProviderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInspectProviderRequestWithBody generates requests for PostInspectProvider with any type of body
func NewPostInspectProviderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inspect/provider")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListRequest generates requests for GetList
func NewGetListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPlanRequest calls the generic PostPlan builder with application/json body
func NewPostPlanRequest(server string, body PostPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPlanRequestWithBody generates requests for PostPlan with any type of body
func NewPostPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryRequest calls the generic PostQuery builder with application/json body
func NewPostQueryRequest(server string, body PostQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryRequestWithBody generates requests for PostQuery with any type of body
func NewPostQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReportsRequest calls the generic PostReports builder with application/json body
func NewPostReportsRequest(server string, body PostReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReportsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReportsRequestWithBody generates requests for PostReports with any type of body
func NewPostReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportsListRequest generates requests for GetReportsList
func NewGetReportsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reports/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowsListRequest generates requests for GetWorkflowsList
func NewGetWorkflowsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkflowsReportsRequest calls the generic PostWorkflowsReports builder with application/json body
func NewPostWorkflowsReportsRequest(server string, body PostWorkflowsReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsReportsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWorkflowsReportsRequestWithBody generates requests for PostWorkflowsReports with any type of body
func NewPostWorkflowsReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkflowsReportsListRequest generates requests for GetWorkflowsReportsList
func NewGetWorkflowsReportsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/reports/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkflowsStartRequest calls the generic PostWorkflowsStart builder with application/json body
func NewPostWorkflowsStartRequest(server string, body PostWorkflowsStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWorkflowsStartRequestWithBody generates requests for PostWorkflowsStart with any type of body
func NewPostWorkflowsStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostExecuteWithBodyWithResponse request with any body
	PostExecuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteResponse, error)

	PostExecuteWithResponse(ctx context.Context, body PostExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteResponse, error)

	// PostInspectOpWithBodyWithResponse request with any body
	PostInspectOpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInspectOpResponse, error)

	PostInspectOpWithResponse(ctx context.Context, body PostInspectOpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInspectOpResponse, error)

	// PostInspectProviderWithBodyWithResponse request with any body
	PostInspectProviderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInspectProviderResponse, error)

	PostInspectProviderWithResponse(ctx context.Context, body PostInspectProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInspectProviderResponse, error)

	// GetListWithResponse request
	GetListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListResponse, error)

	// PostPlanWithBodyWithResponse request with any body
	PostPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlanResponse, error)

	PostPlanWithResponse(ctx context.Context, body PostPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlanResponse, error)

	// PostQueryWithBodyWithResponse request with any body
	PostQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryResponse, error)

	PostQueryWithResponse(ctx context.Context, body PostQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryResponse, error)

	// PostReportsWithBodyWithResponse request with any body
	PostReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReportsResponse, error)

	PostReportsWithResponse(ctx context.Context, body PostReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReportsResponse, error)

	// GetReportsListWithResponse request
	GetReportsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReportsListResponse, error)

	// GetWorkflowsListWithResponse request
	GetWorkflowsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkflowsListResponse, error)

	// PostWorkflowsReportsWithBodyWithResponse request with any body
	PostWorkflowsReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsReportsResponse, error)

	PostWorkflowsReportsWithResponse(ctx context.Context, body PostWorkflowsReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsReportsResponse, error)

	// GetWorkflowsReportsListWithResponse request
	GetWorkflowsReportsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkflowsReportsListResponse, error)

	// PostWorkflowsStartWithBodyWithResponse request with any body
	PostWorkflowsStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsStartResponse, error)

	PostWorkflowsStartWithResponse(ctx context.Context, body PostWorkflowsStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsStartResponse, error)
}

type PostExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
}

// Status returns HTTPResponse.Status
func (r PostExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInspectOpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostInspectOpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInspectOpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInspectProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostInspectProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInspectProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Name The name of Gauntlet operation.
		Name OperationName `json:"name"`
		Type string        `json:"type"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
}

// Status returns HTTPResponse.Status
func (r PostPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
}

// Status returns HTTPResponse.Status
func (r PostQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]Report
}

// Status returns HTTPResponse.Status
func (r PostReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetReportsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Name The name of Gauntlet workflow.
		Name WorkflowName `json:"name"`
		Type string       `json:"type"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]WorkflowReport
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsReportsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsReportsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsReportsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowReport
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostExecuteWithBodyWithResponse request with arbitrary body returning *PostExecuteResponse
func (c *ClientWithResponses) PostExecuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteResponse, error) {
	rsp, err := c.PostExecuteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteResponse(rsp)
}

func (c *ClientWithResponses) PostExecuteWithResponse(ctx context.Context, body PostExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteResponse, error) {
	rsp, err := c.PostExecute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteResponse(rsp)
}

// PostInspectOpWithBodyWithResponse request with arbitrary body returning *PostInspectOpResponse
func (c *ClientWithResponses) PostInspectOpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInspectOpResponse, error) {
	rsp, err := c.PostInspectOpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInspectOpResponse(rsp)
}

func (c *ClientWithResponses) PostInspectOpWithResponse(ctx context.Context, body PostInspectOpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInspectOpResponse, error) {
	rsp, err := c.PostInspectOp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInspectOpResponse(rsp)
}

// PostInspectProviderWithBodyWithResponse request with arbitrary body returning *PostInspectProviderResponse
func (c *ClientWithResponses) PostInspectProviderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInspectProviderResponse, error) {
	rsp, err := c.PostInspectProviderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInspectProviderResponse(rsp)
}

func (c *ClientWithResponses) PostInspectProviderWithResponse(ctx context.Context, body PostInspectProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInspectProviderResponse, error) {
	rsp, err := c.PostInspectProvider(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInspectProviderResponse(rsp)
}

// GetListWithResponse request returning *GetListResponse
func (c *ClientWithResponses) GetListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListResponse, error) {
	rsp, err := c.GetList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListResponse(rsp)
}

// PostPlanWithBodyWithResponse request with arbitrary body returning *PostPlanResponse
func (c *ClientWithResponses) PostPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlanResponse, error) {
	rsp, err := c.PostPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlanResponse(rsp)
}

func (c *ClientWithResponses) PostPlanWithResponse(ctx context.Context, body PostPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlanResponse, error) {
	rsp, err := c.PostPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlanResponse(rsp)
}

// PostQueryWithBodyWithResponse request with arbitrary body returning *PostQueryResponse
func (c *ClientWithResponses) PostQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryResponse, error) {
	rsp, err := c.PostQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryResponse(rsp)
}

func (c *ClientWithResponses) PostQueryWithResponse(ctx context.Context, body PostQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryResponse, error) {
	rsp, err := c.PostQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryResponse(rsp)
}

// PostReportsWithBodyWithResponse request with arbitrary body returning *PostReportsResponse
func (c *ClientWithResponses) PostReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReportsResponse, error) {
	rsp, err := c.PostReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportsResponse(rsp)
}

func (c *ClientWithResponses) PostReportsWithResponse(ctx context.Context, body PostReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReportsResponse, error) {
	rsp, err := c.PostReports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportsResponse(rsp)
}

// GetReportsListWithResponse request returning *GetReportsListResponse
func (c *ClientWithResponses) GetReportsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReportsListResponse, error) {
	rsp, err := c.GetReportsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportsListResponse(rsp)
}

// GetWorkflowsListWithResponse request returning *GetWorkflowsListResponse
func (c *ClientWithResponses) GetWorkflowsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkflowsListResponse, error) {
	rsp, err := c.GetWorkflowsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsListResponse(rsp)
}

// PostWorkflowsReportsWithBodyWithResponse request with arbitrary body returning *PostWorkflowsReportsResponse
func (c *ClientWithResponses) PostWorkflowsReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsReportsResponse, error) {
	rsp, err := c.PostWorkflowsReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsReportsResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsReportsWithResponse(ctx context.Context, body PostWorkflowsReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsReportsResponse, error) {
	rsp, err := c.PostWorkflowsReports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsReportsResponse(rsp)
}

// GetWorkflowsReportsListWithResponse request returning *GetWorkflowsReportsListResponse
func (c *ClientWithResponses) GetWorkflowsReportsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkflowsReportsListResponse, error) {
	rsp, err := c.GetWorkflowsReportsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsReportsListResponse(rsp)
}

// PostWorkflowsStartWithBodyWithResponse request with arbitrary body returning *PostWorkflowsStartResponse
func (c *ClientWithResponses) PostWorkflowsStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsStartResponse, error) {
	rsp, err := c.PostWorkflowsStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsStartResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsStartWithResponse(ctx context.Context, body PostWorkflowsStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsStartResponse, error) {
	rsp, err := c.PostWorkflowsStart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsStartResponse(rsp)
}

// ParsePostExecuteResponse parses an HTTP response from a PostExecuteWithResponse call
func ParsePostExecuteResponse(rsp *http.Response) (*PostExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInspectOpResponse parses an HTTP response from a PostInspectOpWithResponse call
func ParsePostInspectOpResponse(rsp *http.Response) (*PostInspectOpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInspectOpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInspectProviderResponse parses an HTTP response from a PostInspectProviderWithResponse call
func ParsePostInspectProviderResponse(rsp *http.Response) (*PostInspectProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInspectProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetListResponse parses an HTTP response from a GetListWithResponse call
func ParseGetListResponse(rsp *http.Response) (*GetListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Name The name of Gauntlet operation.
			Name OperationName `json:"name"`
			Type string        `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPlanResponse parses an HTTP response from a PostPlanWithResponse call
func ParsePostPlanResponse(rsp *http.Response) (*PostPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryResponse parses an HTTP response from a PostQueryWithResponse call
func ParsePostQueryResponse(rsp *http.Response) (*PostQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReportsResponse parses an HTTP response from a PostReportsWithResponse call
func ParsePostReportsResponse(rsp *http.Response) (*PostReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReportsListResponse parses an HTTP response from a GetReportsListWithResponse call
func ParseGetReportsListResponse(rsp *http.Response) (*GetReportsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsListResponse parses an HTTP response from a GetWorkflowsListWithResponse call
func ParseGetWorkflowsListResponse(rsp *http.Response) (*GetWorkflowsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Name The name of Gauntlet workflow.
			Name WorkflowName `json:"name"`
			Type string       `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsReportsResponse parses an HTTP response from a PostWorkflowsReportsWithResponse call
func ParsePostWorkflowsReportsResponse(rsp *http.Response) (*PostWorkflowsReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]WorkflowReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsReportsListResponse parses an HTTP response from a GetWorkflowsReportsListWithResponse call
func ParseGetWorkflowsReportsListResponse(rsp *http.Response) (*GetWorkflowsReportsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsReportsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsStartResponse parses an HTTP response from a PostWorkflowsStartWithResponse call
func ParsePostWorkflowsStartResponse(rsp *http.Response) (*PostWorkflowsStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
