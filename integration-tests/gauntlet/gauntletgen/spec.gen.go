// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX2/bNhD/KgSXhwST/2x7ql6ybhm6ANvipQEKLE0BRjrbbGWSJal4WabvPpAiZf2h",
	"JTuJ0Wx7k+y7493vjr+70wNO+EpwBkwrHD9glSxhRezjj5zN6cI8paASSYWmnOEYvyE50xloJHOm6QpQ",
	"YgVzSaxAhIXkAqSmYM2kRBPFc5mUr1TDyj4cSZjjGH812TgwcadPziodXERY3wvAMSZSknvzLiS/oynI",
	"3e3NnEbXWhFhCZ9zKiHF8XXNdNRw/KbS47cfIdHGUM3J+KEVNEk0vbO/O7VbzjMgzOhRJnJthdKUGshI",
	"NmsoszzLyG0GONYyhyJwNCOrunGlJWWLTjBWyp8XiuAnKbkMO28y3bEf4YSnEPxjBUqRxQ5OeUFnK+jW",
	"n5DkGn7g6b11J8su5ji+7k/xr6CXPLU6RdSOSGSEBZFVjAi15HqogN56uaKbjpsiwudMCUj0hfBON8/3",
	"+eo74kJAeYN+M8LBXIbAcif7Cn/8+d7CfsfXYO+cmlQE0neuo5kiwtwjsDNUHT83JkLOXtQP2EJqlQW0",
	"pnqJ7OVBRC7ylaXINrsRuVBda1dLMDoK5QpSNOcS6SVVG9tjHHVr8YBF0lQLumt0EZ+jLhDGWUG0Bmlk",
	"Pxyfxh+uX4/+IKO/pqNXo5uv37+fNN7jxtvRyd+DGsen8ffX09Er88+49XByenwa76dgVeK9FI5OjnDU",
	"ZbWqb7wQgveSOzK/FeprAI07v1tZ+A6JjjflidZLmizRPM/mNEPOEXtfTlrF0yyNEOSXILjUfWTSQc80",
	"6homm/DA97e+K1U2QZO2NIh4lc2OeS7CP+faaXQ8rUMT1N2/H0VY5bdcNGehjt3eoYem2AbjY61MOmhD",
	"lVOmKcz7NA160y7ird6Ex623NWiawIaENdnmXU8hrbn8NM/4egj9d16u7XtlIBTAu5r1Lc3H6x+g93jT",
	"j2493v39Ok9DazeGqXu6jToGek6IWLwn2wimIotODPsTQ8UA3QuuQey+tzhfAzvQeh4w367Gef1K24O7",
	"KSpsJHNuzVFtimJTjyP089XVDL2eneMI34FUZdqm4+n4GzexMSIojvF34+l4WiZsacOaQDnFW6C5smhU",
	"I8V5imM840q7UR+XjoOq7mzCmQZWdlEhMppYvclHVQ5vJUCD1F5bJIqihEcJzlSZ8W+n02c7ymfKHNKs",
	"cZsWla9WRN7jGF/mTCGCEr5aEZYiCQuqNEhIEWVILwEpkHcgSwYw767hphs6UGNrc0LL0X9S9qHtIFfL",
	"yYFgbi4/zwB0oER7MXUOKERYfWxtgCTqo9wQVNXcd1DAGjvbF4WtmuocaBktAVpAAKc3oH8x/z/R24oA",
	"n7wqP2YqDvWq1lgyeJNB59JeZgOXaWHmulZYqa1324HsP0psr8aZkThMCdY/l7wQZjTRPhc1fs5B3veD",
	"+7sV+d+g6/qOBeZJ0Ep7ouoH99IJHQbe2vLxDPBu29L3Gsx2Jl3PGg2uQA5UlHBZxpJStkCaW7EFvQOG",
	"zs9aGRhkaZeEZyXroV3ucaR5fqbMI8ky9InxNesi40L3u8Fw8H7cV1+4VzXXphfTqiogh7rUBvGdLn4F",
	"+3+dAVrr5BOZoFr89yKCTm52vxX/Ym5oY9UBQ2niFvzhMrUfig5UpJuPUAceAtq1OIi09cwAXcPykRNB",
	"UfwTAAD//wg8yTxDHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
