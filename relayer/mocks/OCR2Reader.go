// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	address "github.com/fbsobreira/gotron-sdk/pkg/address"

	context "context"

	mock "github.com/stretchr/testify/mock"

	ocr2 "github.com/smartcontractkit/chainlink-internal-integrations/tron/relayer/ocr2"

	reader "github.com/smartcontractkit/chainlink-internal-integrations/tron/relayer/reader"
)

// OCR2Reader is an autogenerated mock type for the OCR2Reader type
type OCR2Reader struct {
	mock.Mock
}

// BaseReader provides a mock function with given fields:
func (_m *OCR2Reader) BaseReader() reader.Reader {
	ret := _m.Called()

	var r0 reader.Reader
	if rf, ok := ret.Get(0).(func() reader.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reader.Reader)
		}
	}

	return r0
}

// BillingDetails provides a mock function with given fields: _a0, _a1
func (_m *OCR2Reader) BillingDetails(_a0 context.Context, _a1 address.Address) (ocr2.BillingDetails, error) {
	ret := _m.Called(_a0, _a1)

	var r0 ocr2.BillingDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) (ocr2.BillingDetails, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) ocr2.BillingDetails); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ocr2.BillingDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, address.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigFromEventAt provides a mock function with given fields: _a0, _a1, _a2
func (_m *OCR2Reader) ConfigFromEventAt(_a0 context.Context, _a1 address.Address, _a2 uint64) (ocr2.ContractConfig, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 ocr2.ContractConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, address.Address, uint64) (ocr2.ContractConfig, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, address.Address, uint64) ocr2.ContractConfig); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(ocr2.ContractConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, address.Address, uint64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestConfigDetails provides a mock function with given fields: _a0, _a1
func (_m *OCR2Reader) LatestConfigDetails(_a0 context.Context, _a1 address.Address) (ocr2.ContractConfigDetails, error) {
	ret := _m.Called(_a0, _a1)

	var r0 ocr2.ContractConfigDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) (ocr2.ContractConfigDetails, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) ocr2.ContractConfigDetails); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ocr2.ContractConfigDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, address.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestRoundData provides a mock function with given fields: _a0, _a1
func (_m *OCR2Reader) LatestRoundData(_a0 context.Context, _a1 address.Address) (ocr2.RoundData, error) {
	ret := _m.Called(_a0, _a1)

	var r0 ocr2.RoundData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) (ocr2.RoundData, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) ocr2.RoundData); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ocr2.RoundData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, address.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestTransmissionDetails provides a mock function with given fields: _a0, _a1
func (_m *OCR2Reader) LatestTransmissionDetails(_a0 context.Context, _a1 address.Address) (ocr2.TransmissionDetails, error) {
	ret := _m.Called(_a0, _a1)

	var r0 ocr2.TransmissionDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) (ocr2.TransmissionDetails, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) ocr2.TransmissionDetails); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ocr2.TransmissionDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, address.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkAvailableForPayment provides a mock function with given fields: _a0, _a1
func (_m *OCR2Reader) LinkAvailableForPayment(_a0 context.Context, _a1 address.Address) (*big.Int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) (*big.Int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, address.Address) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, address.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOCR2Reader interface {
	mock.TestingT
	Cleanup(func())
}

// NewOCR2Reader creates a new instance of OCR2Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOCR2Reader(t mockConstructorTestingTNewOCR2Reader) *OCR2Reader {
	mock := &OCR2Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
