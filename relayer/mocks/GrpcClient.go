// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	api "github.com/fbsobreira/gotron-sdk/pkg/proto/api"
	core "github.com/fbsobreira/gotron-sdk/pkg/proto/core"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GrpcClient is an autogenerated mock type for the GrpcClient type
type GrpcClient struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: tx
func (_m *GrpcClient) Broadcast(tx *core.Transaction) (*api.Return, error) {
	ret := _m.Called(tx)

	var r0 *api.Return
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.Transaction) (*api.Return, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*core.Transaction) *api.Return); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Return)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Transaction) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployContract provides a mock function with given fields: from, contractName, abi, codeStr, feeLimit, curPercent, oeLimit
func (_m *GrpcClient) DeployContract(from string, contractName string, abi *core.SmartContract_ABI, codeStr string, feeLimit int64, curPercent int64, oeLimit int64) (*api.TransactionExtention, error) {
	ret := _m.Called(from, contractName, abi, codeStr, feeLimit, curPercent, oeLimit)

	var r0 *api.TransactionExtention
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *core.SmartContract_ABI, string, int64, int64, int64) (*api.TransactionExtention, error)); ok {
		return rf(from, contractName, abi, codeStr, feeLimit, curPercent, oeLimit)
	}
	if rf, ok := ret.Get(0).(func(string, string, *core.SmartContract_ABI, string, int64, int64, int64) *api.TransactionExtention); ok {
		r0 = rf(from, contractName, abi, codeStr, feeLimit, curPercent, oeLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TransactionExtention)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *core.SmartContract_ABI, string, int64, int64, int64) error); ok {
		r1 = rf(from, contractName, abi, codeStr, feeLimit, curPercent, oeLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateEnergy provides a mock function with given fields: from, contractAddress, method, jsonString, tAmount, tTokenID, tTokenAmount
func (_m *GrpcClient) EstimateEnergy(from string, contractAddress string, method string, jsonString string, tAmount int64, tTokenID string, tTokenAmount int64) (*api.EstimateEnergyMessage, error) {
	ret := _m.Called(from, contractAddress, method, jsonString, tAmount, tTokenID, tTokenAmount)

	var r0 *api.EstimateEnergyMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int64, string, int64) (*api.EstimateEnergyMessage, error)); ok {
		return rf(from, contractAddress, method, jsonString, tAmount, tTokenID, tTokenAmount)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, int64, string, int64) *api.EstimateEnergyMessage); ok {
		r0 = rf(from, contractAddress, method, jsonString, tAmount, tTokenID, tTokenAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.EstimateEnergyMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, int64, string, int64) error); ok {
		r1 = rf(from, contractAddress, method, jsonString, tAmount, tTokenID, tTokenAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByNum provides a mock function with given fields: num
func (_m *GrpcClient) GetBlockByNum(num int64) (*api.BlockExtention, error) {
	ret := _m.Called(num)

	var r0 *api.BlockExtention
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*api.BlockExtention, error)); ok {
		return rf(num)
	}
	if rf, ok := ret.Get(0).(func(int64) *api.BlockExtention); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.BlockExtention)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContractABI provides a mock function with given fields: address
func (_m *GrpcClient) GetContractABI(address string) (*core.SmartContract_ABI, error) {
	ret := _m.Called(address)

	var r0 *core.SmartContract_ABI
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*core.SmartContract_ABI, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) *core.SmartContract_ABI); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.SmartContract_ABI)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnergyPrices provides a mock function with given fields:
func (_m *GrpcClient) GetEnergyPrices() (*api.PricesResponseMessage, error) {
	ret := _m.Called()

	var r0 *api.PricesResponseMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.PricesResponseMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.PricesResponseMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PricesResponseMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNowBlock provides a mock function with given fields:
func (_m *GrpcClient) GetNowBlock() (*api.BlockExtention, error) {
	ret := _m.Called()

	var r0 *api.BlockExtention
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.BlockExtention, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.BlockExtention); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.BlockExtention)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionInfoByID provides a mock function with given fields: id
func (_m *GrpcClient) GetTransactionInfoByID(id string) (*core.TransactionInfo, error) {
	ret := _m.Called(id)

	var r0 *core.TransactionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*core.TransactionInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *core.TransactionInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TransactionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: opts
func (_m *GrpcClient) Start(opts ...grpc.DialOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...grpc.DialOption) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *GrpcClient) Stop() {
	_m.Called()
}

// TriggerConstantContract provides a mock function with given fields: from, contractAddress, method, jsonString
func (_m *GrpcClient) TriggerConstantContract(from string, contractAddress string, method string, jsonString string) (*api.TransactionExtention, error) {
	ret := _m.Called(from, contractAddress, method, jsonString)

	var r0 *api.TransactionExtention
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*api.TransactionExtention, error)); ok {
		return rf(from, contractAddress, method, jsonString)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *api.TransactionExtention); ok {
		r0 = rf(from, contractAddress, method, jsonString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TransactionExtention)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(from, contractAddress, method, jsonString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerContract provides a mock function with given fields: from, contractAddress, method, jsonString, feeLimit, tAmount, tTokenID, tTokenAmount
func (_m *GrpcClient) TriggerContract(from string, contractAddress string, method string, jsonString string, feeLimit int64, tAmount int64, tTokenID string, tTokenAmount int64) (*api.TransactionExtention, error) {
	ret := _m.Called(from, contractAddress, method, jsonString, feeLimit, tAmount, tTokenID, tTokenAmount)

	var r0 *api.TransactionExtention
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int64, int64, string, int64) (*api.TransactionExtention, error)); ok {
		return rf(from, contractAddress, method, jsonString, feeLimit, tAmount, tTokenID, tTokenAmount)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, int64, int64, string, int64) *api.TransactionExtention); ok {
		r0 = rf(from, contractAddress, method, jsonString, feeLimit, tAmount, tTokenID, tTokenAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TransactionExtention)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, int64, int64, string, int64) error); ok {
		r1 = rf(from, contractAddress, method, jsonString, feeLimit, tAmount, tTokenID, tTokenAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGrpcClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrpcClient creates a new instance of GrpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrpcClient(t mockConstructorTestingTNewGrpcClient) *GrpcClient {
	mock := &GrpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
