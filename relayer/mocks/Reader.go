// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	address "github.com/fbsobreira/gotron-sdk/pkg/address"
	mock "github.com/stretchr/testify/mock"

	sdk "github.com/smartcontractkit/chainlink-internal-integrations/tron/relayer/sdk"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// Balance provides a mock function with given fields: _a0
func (_m *Reader) Balance(_a0 address.Address) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(address.Address) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(address.Address) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseClient provides a mock function with given fields:
func (_m *Reader) BaseClient() sdk.GrpcClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseClient")
	}

	var r0 sdk.GrpcClient
	if rf, ok := ret.Get(0).(func() sdk.GrpcClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sdk.GrpcClient)
		}
	}

	return r0
}

// CallContract provides a mock function with given fields: _a0, method, params
func (_m *Reader) CallContract(_a0 address.Address, method string, params []interface{}) (map[string]interface{}, error) {
	ret := _m.Called(_a0, method, params)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, string, []interface{}) (map[string]interface{}, error)); ok {
		return rf(_a0, method, params)
	}
	if rf, ok := ret.Get(0).(func(address.Address, string, []interface{}) map[string]interface{}); ok {
		r0 = rf(_a0, method, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, string, []interface{}) error); ok {
		r1 = rf(_a0, method, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsFromBlock provides a mock function with given fields: _a0, eventName, blockNum
func (_m *Reader) GetEventsFromBlock(_a0 address.Address, eventName string, blockNum uint64) ([]map[string]interface{}, error) {
	ret := _m.Called(_a0, eventName, blockNum)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsFromBlock")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, string, uint64) ([]map[string]interface{}, error)); ok {
		return rf(_a0, eventName, blockNum)
	}
	if rf, ok := ret.Get(0).(func(address.Address, string, uint64) []map[string]interface{}); ok {
		r0 = rf(_a0, eventName, blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, string, uint64) error); ok {
		r1 = rf(_a0, eventName, blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestBlockHeight provides a mock function with given fields:
func (_m *Reader) LatestBlockHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
