// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	address "github.com/fbsobreira/gotron-sdk/pkg/address"
	common "github.com/fbsobreira/gotron-sdk/pkg/http/common"

	fullnode "github.com/fbsobreira/gotron-sdk/pkg/http/fullnode"

	mock "github.com/stretchr/testify/mock"

	soliditynode "github.com/fbsobreira/gotron-sdk/pkg/http/soliditynode"
)

// FullNodeClient is an autogenerated mock type for the FullNodeClient type
type FullNodeClient struct {
	mock.Mock
}

// BroadcastTransaction provides a mock function with given fields: reqBody
func (_m *FullNodeClient) BroadcastTransaction(reqBody *common.Transaction) (*fullnode.BroadcastResponse, error) {
	ret := _m.Called(reqBody)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastTransaction")
	}

	var r0 *fullnode.BroadcastResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.Transaction) (*fullnode.BroadcastResponse, error)); ok {
		return rf(reqBody)
	}
	if rf, ok := ret.Get(0).(func(*common.Transaction) *fullnode.BroadcastResponse); ok {
		r0 = rf(reqBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fullnode.BroadcastResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.Transaction) error); ok {
		r1 = rf(reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployContract provides a mock function with given fields: ownerAddress, contractName, abiJson, bytecode, oeLimit, curPercent, feeLimit, params
func (_m *FullNodeClient) DeployContract(ownerAddress address.Address, contractName string, abiJson string, bytecode string, oeLimit int, curPercent int, feeLimit int, params []interface{}) (*fullnode.DeployContractResponse, error) {
	ret := _m.Called(ownerAddress, contractName, abiJson, bytecode, oeLimit, curPercent, feeLimit, params)

	if len(ret) == 0 {
		panic("no return value specified for DeployContract")
	}

	var r0 *fullnode.DeployContractResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, string, string, string, int, int, int, []interface{}) (*fullnode.DeployContractResponse, error)); ok {
		return rf(ownerAddress, contractName, abiJson, bytecode, oeLimit, curPercent, feeLimit, params)
	}
	if rf, ok := ret.Get(0).(func(address.Address, string, string, string, int, int, int, []interface{}) *fullnode.DeployContractResponse); ok {
		r0 = rf(ownerAddress, contractName, abiJson, bytecode, oeLimit, curPercent, feeLimit, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fullnode.DeployContractResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, string, string, string, int, int, int, []interface{}) error); ok {
		r1 = rf(ownerAddress, contractName, abiJson, bytecode, oeLimit, curPercent, feeLimit, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateEnergy provides a mock function with given fields: from, contractAddress, method, params, tAmount
func (_m *FullNodeClient) EstimateEnergy(from address.Address, contractAddress address.Address, method string, params []interface{}, tAmount int64) (*soliditynode.EnergyEstimateResult, error) {
	ret := _m.Called(from, contractAddress, method, params, tAmount)

	if len(ret) == 0 {
		panic("no return value specified for EstimateEnergy")
	}

	var r0 *soliditynode.EnergyEstimateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, []interface{}, int64) (*soliditynode.EnergyEstimateResult, error)); ok {
		return rf(from, contractAddress, method, params, tAmount)
	}
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, []interface{}, int64) *soliditynode.EnergyEstimateResult); ok {
		r0 = rf(from, contractAddress, method, params, tAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*soliditynode.EnergyEstimateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, address.Address, string, []interface{}, int64) error); ok {
		r1 = rf(from, contractAddress, method, params, tAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: accountAddress
func (_m *FullNodeClient) GetAccount(accountAddress address.Address) (*soliditynode.GetAccountResponse, error) {
	ret := _m.Called(accountAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *soliditynode.GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address) (*soliditynode.GetAccountResponse, error)); ok {
		return rf(accountAddress)
	}
	if rf, ok := ret.Get(0).(func(address.Address) *soliditynode.GetAccountResponse); ok {
		r0 = rf(accountAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*soliditynode.GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address) error); ok {
		r1 = rf(accountAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByNum provides a mock function with given fields: num
func (_m *FullNodeClient) GetBlockByNum(num int32) (*soliditynode.Block, error) {
	ret := _m.Called(num)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByNum")
	}

	var r0 *soliditynode.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (*soliditynode.Block, error)); ok {
		return rf(num)
	}
	if rf, ok := ret.Get(0).(func(int32) *soliditynode.Block); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*soliditynode.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContract provides a mock function with given fields: _a0
func (_m *FullNodeClient) GetContract(_a0 address.Address) (*fullnode.GetContractResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetContract")
	}

	var r0 *fullnode.GetContractResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address) (*fullnode.GetContractResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(address.Address) *fullnode.GetContractResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fullnode.GetContractResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnergyPrices provides a mock function with no fields
func (_m *FullNodeClient) GetEnergyPrices() (*fullnode.EnergyPrices, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnergyPrices")
	}

	var r0 *fullnode.EnergyPrices
	var r1 error
	if rf, ok := ret.Get(0).(func() (*fullnode.EnergyPrices, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *fullnode.EnergyPrices); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fullnode.EnergyPrices)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNowBlock provides a mock function with no fields
func (_m *FullNodeClient) GetNowBlock() (*soliditynode.Block, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNowBlock")
	}

	var r0 *soliditynode.Block
	var r1 error
	if rf, ok := ret.Get(0).(func() (*soliditynode.Block, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *soliditynode.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*soliditynode.Block)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionInfoById provides a mock function with given fields: txhash
func (_m *FullNodeClient) GetTransactionInfoById(txhash string) (*soliditynode.TransactionInfo, error) {
	ret := _m.Called(txhash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionInfoById")
	}

	var r0 *soliditynode.TransactionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*soliditynode.TransactionInfo, error)); ok {
		return rf(txhash)
	}
	if rf, ok := ret.Get(0).(func(string) *soliditynode.TransactionInfo); ok {
		r0 = rf(txhash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*soliditynode.TransactionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txhash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: fromAddress, toAddress, amount
func (_m *FullNodeClient) Transfer(fromAddress address.Address, toAddress address.Address, amount int64) (*common.Transaction, error) {
	ret := _m.Called(fromAddress, toAddress, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *common.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, int64) (*common.Transaction, error)); ok {
		return rf(fromAddress, toAddress, amount)
	}
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, int64) *common.Transaction); ok {
		r0 = rf(fromAddress, toAddress, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, address.Address, int64) error); ok {
		r1 = rf(fromAddress, toAddress, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerConstantContract provides a mock function with given fields: from, contractAddress, method, params
func (_m *FullNodeClient) TriggerConstantContract(from address.Address, contractAddress address.Address, method string, params []interface{}) (*soliditynode.TriggerConstantContractResponse, error) {
	ret := _m.Called(from, contractAddress, method, params)

	if len(ret) == 0 {
		panic("no return value specified for TriggerConstantContract")
	}

	var r0 *soliditynode.TriggerConstantContractResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, []interface{}) (*soliditynode.TriggerConstantContractResponse, error)); ok {
		return rf(from, contractAddress, method, params)
	}
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, []interface{}) *soliditynode.TriggerConstantContractResponse); ok {
		r0 = rf(from, contractAddress, method, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*soliditynode.TriggerConstantContractResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, address.Address, string, []interface{}) error); ok {
		r1 = rf(from, contractAddress, method, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerSmartContract provides a mock function with given fields: from, contractAddress, method, params, feeLimit, tAmount
func (_m *FullNodeClient) TriggerSmartContract(from address.Address, contractAddress address.Address, method string, params []interface{}, feeLimit int32, tAmount int64) (*fullnode.TriggerSmartContractResponse, error) {
	ret := _m.Called(from, contractAddress, method, params, feeLimit, tAmount)

	if len(ret) == 0 {
		panic("no return value specified for TriggerSmartContract")
	}

	var r0 *fullnode.TriggerSmartContractResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, []interface{}, int32, int64) (*fullnode.TriggerSmartContractResponse, error)); ok {
		return rf(from, contractAddress, method, params, feeLimit, tAmount)
	}
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, []interface{}, int32, int64) *fullnode.TriggerSmartContractResponse); ok {
		r0 = rf(from, contractAddress, method, params, feeLimit, tAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fullnode.TriggerSmartContractResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, address.Address, string, []interface{}, int32, int64) error); ok {
		r1 = rf(from, contractAddress, method, params, feeLimit, tAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerSmartContractWithData provides a mock function with given fields: from, contractAddress, data, feeLimit, tAmount
func (_m *FullNodeClient) TriggerSmartContractWithData(from address.Address, contractAddress address.Address, data string, feeLimit int32, tAmount int64) (*fullnode.TriggerSmartContractResponse, error) {
	ret := _m.Called(from, contractAddress, data, feeLimit, tAmount)

	if len(ret) == 0 {
		panic("no return value specified for TriggerSmartContractWithData")
	}

	var r0 *fullnode.TriggerSmartContractResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, int32, int64) (*fullnode.TriggerSmartContractResponse, error)); ok {
		return rf(from, contractAddress, data, feeLimit, tAmount)
	}
	if rf, ok := ret.Get(0).(func(address.Address, address.Address, string, int32, int64) *fullnode.TriggerSmartContractResponse); ok {
		r0 = rf(from, contractAddress, data, feeLimit, tAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fullnode.TriggerSmartContractResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(address.Address, address.Address, string, int32, int64) error); ok {
		r1 = rf(from, contractAddress, data, feeLimit, tAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFullNodeClient creates a new instance of FullNodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFullNodeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FullNodeClient {
	mock := &FullNodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
