name: Tron - Local OCR e2e test

on:
  push:
    branches:
      - develop
      - main
      - next
  pull_request:

concurrency:
  group: docker-tests-${{ github.ref }}
  cancel-in-progress: true
env:
  CL_ECR: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink
jobs:
  integration_tests_docker:
    name: Run Docker Integration Tests
    runs-on: ubuntu-latest-32cores-128GB
    environment: integration
    permissions:
      id-token: write
      contents: read
    env:
      DEFAULT_CORE_REF: develop
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Setup GitHub Token
        id: setup-github-token
        uses: smartcontractkit/.github/actions/setup-github-token@ef78fa97bf3c77de6563db1175422703e9e6674f # setup-github-token@0.2.1
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN_GATI_READONLY }}
          aws-lambda-url: ${{ secrets.AWS_LAMBDA_URL_GATI_READONLY }}
          aws-region: ${{ secrets.QA_AWS_REGION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ secrets.QA_AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_PUBLISH_ARN_STAGING }}
          role-duration-seconds: 3600
          mask-aws-account-id: true
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: "true"

      - name: Get core ref from PR body
        if: github.event_name == 'pull_request'
        run: |
          comment=$(echo "${{ github.event.pull_request.body }}")
          core_ref=$(echo $comment | grep -oP 'core ref: \K\S+' || true)
          if [ ! -z "$core_ref" ]; then
            echo "CUSTOM_CORE_REF=${core_ref}" >> "${GITHUB_ENV}"
          fi

      - name: Checkout chainlink repo
        uses: actions/checkout@v4
        with:
          repository: smartcontractkit/chainlink
          ref: ${{ env.CUSTOM_CORE_REF || env.DEFAULT_CORE_REF }}
          path: temp/chainlink

      - name: Read go version from core .tool-versions
        id: tool_versions
        run: |
          go_version=$(grep -E '^golang ' temp/chainlink/.tool-versions | cut -d' ' -f2)
          echo "GO_VERSION=${go_version}" >> "${GITHUB_OUTPUT}"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.tool_versions.outputs.GO_VERSION }}

      # TODO: consider fetching the image instead of building if it already exists on AWS.
      - name: Build chainlink image
        env:
          GIT_AUTH_TOKEN: ${{ steps.setup-github-token.outputs.access-token }}
        run: |
          cd temp/chainlink
          docker buildx build --secret id=GIT_AUTH_TOKEN --build-arg COMMIT_SHA=$(git rev-parse HEAD) -t local_chainlink -f core/chainlink.Dockerfile .

      - name: Check out repo
        uses: actions/checkout@v4

      - name: Build chainlink-tron image
        run: |
          docker buildx build --build-arg BASE_IMAGE=local_chainlink -t chainlink-tron -f ./Dockerfile .

      - name: Run Tron Integration Test
        env:
          CORE_IMAGE: chainlink-tron
          TEST_LOG_LEVEL: debug
        run: |
          cd integration-tests
          TEST_LOG_LEVEL=${{env.TEST_LOG_LEVEL}} CORE_IMAGE=${{env.CORE_IMAGE}} go test -v -tags=integration -count=1 -timeout 30m -run TestOCRLocal ./ocr2_local_test.go
